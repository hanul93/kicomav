# -*- coding:utf-8 -*-
# Author: Kei Choi(hanul93@gmail.com)


import os
import re
import kernel
import kavutil
import cryptolib


# -------------------------------------------------------------------------
# KavMain 클래스
# -------------------------------------------------------------------------
class KavMain:
    # ---------------------------------------------------------------------
    # init(self, plugins_path)
    # 플러그인 엔진을 초기화 한다.
    # 인력값 : plugins_path - 플러그인 엔진의 위치
    #         verbose      - 디버그 모드 (True or False)
    # 리턴값 : 0 - 성공, 0 이외의 값 - 실패
    # ---------------------------------------------------------------------
    def init(self, plugins_path, verbose=False):  # 플러그인 엔진 초기화
        # Worm.Win32.Allaple.gen 패턴
        pat = rb'\xC7\x44\x24.+[\x40\x41]\x00.+\x8B.\x24.+\x33..\x04\x01.\x24.+\x8B.\x24'
        self.p_allaple = re.compile(pat)

        pat = rb'POST /cdn-cgi/\x00\x00 HTTP/1.1\r\nUser-Agent: \x00\r\nHost:' + \
              rb'[\d\D]+?GET\x00+/\x00+Cookie:[\d\D]+?http[\d\D]+?url=[\d\D]+?POST'
        self.p_linux_mirai = re.compile(pat)

        # 변종 바이러스 패턴
        self.mirai_a_strings = [
            'POST /cdn-cgi/',
            'HTTP/1.1\r\nUser-Agent: ',
            'Host:',
            'GET',
            'Cookie:',
            'http',
            'url=',
            'proc/net/tcp'
        ]

        self.aho_mirai_a = kavutil.AhoCorasick()
        self.aho_mirai_a.make_tree(self.mirai_a_strings)
        return 0  # 플러그인 엔진 초기화 성공

    # ---------------------------------------------------------------------
    # uninit(self)
    # 플러그인 엔진을 종료한다.
    # 리턴값 : 0 - 성공, 0 이외의 값 - 실패
    # ---------------------------------------------------------------------
    def uninit(self):  # 플러그인 엔진 종료
        return 0  # 플러그인 엔진 종료 성공

    # ---------------------------------------------------------------------
    # getinfo(self)
    # 플러그인 엔진의 주요 정보를 알려준다. (제작자, 버전, ...)
    # 리턴값 : 플러그인 엔진 정보
    # ---------------------------------------------------------------------
    def getinfo(self):  # 플러그인 엔진의 주요 정보
        info = dict()  # 사전형 변수 선언

        info['author'] = 'Kei Choi'  # 제작자
        info['version'] = '1.1'  # 버전
        info['title'] = 'eMalware Engine'  # 엔진 설명
        info['kmd_name'] = 'emalware'  # 엔진 파일 이름
        info['sig_num'] = kavutil.handle_pattern_md5.get_sig_num('emalware') + 5   # 진단/치료 가능한 악성코드 수

        return info

    # ---------------------------------------------------------------------
    # listvirus(self)
    # 진단/치료 가능한 악성코드의 리스트를 알려준다.
    # 리턴값 : 악성코드 리스트
    # ---------------------------------------------------------------------
    def listvirus(self):  # 진단 가능한 악성코드 리스트
        vlist = kavutil.handle_pattern_md5.get_sig_vlist('emalware')
        vlist.append('Backdoor.Linux.Mirai.a.gen')
        vlist = list(set(vlist))
        vlist.sort()

        vlists = []
        for vname in vlist:
            vlists.append(kavutil.normal_vname(vname))

        vlists.append(kavutil.normal_vname('<n>AdWare.Win32.Sokuxuan.gen'))

        return vlists

    # ---------------------------------------------------------------------
    # scan(self, filehandle, filename, fileformat)
    # 악성코드를 검사한다.
    # 입력값 : filehandle  - 파일 핸들
    #         filename    - 파일 이름
    #         fileformat  - 파일 포맷
    #         filename_ex - 파일 이름 (압축 내부 파일 이름)
    # 리턴값 : (악성코드 발견 여부, 악성코드 이름, 악성코드 ID) 등등
    # ---------------------------------------------------------------------
    def scan(self, filehandle, filename, fileformat, filename_ex):  # 악성코드 검사
        try:
            mm = filehandle

            # 미리 분석된 파일 포맷중에 PE 포맷이 있는가?
            if 'ff_pe' in fileformat:
                ff = fileformat['ff_pe']

                # case 1 : 섹션 전체를 hash로 검사
                for idx, section in enumerate(ff['pe']['Sections']):
                    # if (section['Characteristics'] & 0x20000000) == 0x20000000:  # 실행 속성?
                    # print section['Name'], hex(section['SizeRawData'])
                    fsize = section['SizeRawData']
                    if fsize and kavutil.handle_pattern_md5.match_size('emalware', fsize):
                        foff = section['PointerRawData']
                        fmd5 = cryptolib.md5(mm[foff:foff+fsize])
                        # print fsize, fmd5
                        vname = kavutil.handle_pattern_md5.scan('emalware', fsize, fmd5)
                        if vname:
                            vname = kavutil.normal_vname(vname)
                            return True, vname, 0, kernel.INFECTED

                # case 2. 마지막 섹션에 실행 파일 존재
                if len(ff['pe']['Sections']):
                    # 마지막 섹션
                    sec = ff['pe']['Sections'][-1]
                    off = sec['PointerRawData']
                    size = sec['SizeRawData']

                    # 실행 파일이 존재하는가?
                    exe_offs = [m.start() for m in re.finditer('MZ', mm[off:off+size])]

                    for exe_pos in exe_offs:
                        fsize = 0x1d5
                        if fsize and kavutil.handle_pattern_md5.match_size('emalware', fsize):
                            fmd5 = cryptolib.md5(mm[off + exe_pos:off + exe_pos + fsize])
                            # print fsize, fmd5
                            vname = kavutil.handle_pattern_md5.scan('emalware', fsize, fmd5)
                            if vname:
                                # return True, vname, 0, kernel.INFECTED
                                idx = len(ff['pe']['Sections']) - 1
                                vname = kavutil.normal_vname(vname)
                                return True, vname, (0x80000000 + idx), kernel.INFECTED

                # case 3. pdb를 이용해서 악성코드 검사
                if 'PDB_Name' in ff['pe']:
                    pdb_sigs = {
                        ':\\pz_git\\bin\\': '<n>AdWare.Win32.Sokuxuan.gen',
                        ':\\CODE\\vitruvian\\': '<n>AdWare.Win32.Vitruvian.gen',
                        '\\bin\\Release\\WebSparkle.': '<n>AdWare.MSIL.BrowseFox.gen',
                        ':\\TeamCity\\BuildAgent1\\work\\': '<n>WebToolbar.Win32.Agent.avi',
                    }

                    for pat in pdb_sigs.keys():
                        if ff['pe']['PDB_Name'].find(pat) != -1:
                            vname = kavutil.normal_vname(pdb_sigs[pat])
                            return True, vname, 0, kernel.INFECTED

                # case 4. Worm.Win32.Allaple.gen 검사
                ep_off = ff['pe']['EntryPointRaw']
                data = mm[ep_off:ep_off+0x80]
                if self.p_allaple.search(data):
                    return True, 'Worm.Win32.Allaple.gen', 0, kernel.INFECTED

            # 미리 분석된 파일 포맷중에 ELF 포맷이 있는가?
            elif 'ff_elf' in fileformat:
                ff = fileformat['ff_elf']

                if len(ff['elf']['Sections']):
                    for section in ff['elf']['Sections']:
                        if (section['Type'] & 0x1) == 0x1 and (section['Flag'] & 0x4) == 0x4:  # 프로그램 데이터이면서 실행 속성?
                            # print section['Name'], section['Size'], section['Offset']
                            fsize = section['Size']
                            if fsize and kavutil.handle_pattern_md5.match_size('emalware', fsize):
                                foff = section['Offset']
                                fmd5 = cryptolib.md5(mm[foff:foff + fsize])
                                # print fsize, fmd5
                                vname = kavutil.handle_pattern_md5.scan('emalware', fsize, fmd5)
                                if vname:
                                    vname = kavutil.normal_vname(vname)
                                    return True, vname, 0, kernel.INFECTED
                elif len(ff['elf']['ProgramHeaders']):
                    for ph in ff['elf']['ProgramHeaders']:
                        if (ph['Type'] & 0x1) == 0x1 and (ph['Flag'] & 0x1) == 0x1:
                            fsize = ph['Size']
                            if fsize and kavutil.handle_pattern_md5.match_size('emalware', fsize):
                                foff = ph['Offset']
                                fmd5 = cryptolib.md5(mm[foff:foff + fsize])
                                # print fsize, fmd5
                                vname = kavutil.handle_pattern_md5.scan('emalware', fsize, fmd5)
                                if vname:
                                    vname = kavutil.normal_vname(vname)
                                    return True, vname, 0, kernel.INFECTED

                # Mirai 변종 진단
                '''
                for section in ff['elf']['Sections']:
                    if section['Name'] == '.rodata':
                        fsize = section['Size']
                        foff = section['Offset']
                        if self.p_linux_mirai.match(mm[foff:foff+fsize]):
                            return True, 'Backdoor.Linux.Mirai.gen', 0, kernel.SUSPECT
                '''
                for section in ff['elf']['Sections']:
                    if section['Name'] == '.rodata':
                        vstring = []

                        foff = section['Offset']
                        ret = self.aho_mirai_a.search(mm[foff:foff + 0x200])

                        for n in ret[:len(self.mirai_a_strings)]:
                            vstring.append(n[1])

                        # print vstring
                        # print len(set(vstring)), len(self.mirai_a_strings)

                        if set(vstring) == set(self.mirai_a_strings):
                            return True, 'Backdoor.Linux.Mirai.a.gen', 0, kernel.SUSPECT

            # NSIS 같은 설치 프로그램의 경우 첨부 영역에 존재하는데..
            # 디컴파일하지 않고 오리지널 이미지 원본을 탐지하도록 했음..
            if 'ff_attach' in fileformat:
                foff = fileformat['ff_attach']['Attached_Pos']
                buf = mm[foff:]
                fsize = len(buf)
                if fsize and kavutil.handle_pattern_md5.match_size('emalware', fsize):
                    fmd5 = cryptolib.md5(buf)  # 첨부 위치부터 끝까지
                    vname = kavutil.handle_pattern_md5.scan('emalware', fsize, fmd5)
                    if vname:
                        vname = kavutil.normal_vname(vname)
                        return True, vname, 0, kernel.INFECTED

        except IOError:
            pass

        # 악성코드를 발견하지 못했음을 리턴한다.
        return False, '', -1, kernel.NOT_FOUND

    # ---------------------------------------------------------------------
    # disinfect(self, filename, malware_id)
    # 악성코드를 치료한다.
    # 입력값 : filename    - 파일 이름
    #        : malware_id - 치료할 악성코드 ID
    # 리턴값 : 악성코드 치료 여부
    # ---------------------------------------------------------------------
    def disinfect(self, filename, malware_id):  # 악성코드 치료
        try:
            # 악성코드 진단 결과에서 받은 ID 값이 0인가?
            if malware_id == 0:
                os.remove(filename)  # 파일 삭제
                return True  # 치료 완료 리턴
            if malware_id & 0x80000000 == 0x80000000:
                idx = malware_id & 0x7fffffff

                import pe

                buf = open(filename, 'rb').read()
                pe = pe.PE(buf, False, filename)
                try:
                    pe_format = pe.parse()  # PE 파일 분석
                except MemoryError:
                    pe_format = None

                if pe_format is None:
                    return False

                ff = {'pe': pe_format}

                if len(ff['pe']['Sections']) > idx:
                    section = ff['pe']['Sections'][idx]
                    fsize = section['SizeRawData']
                    foff = section['PointerRawData']

                    data = buf[:foff] + ('\x00' * fsize) + buf[foff+fsize:]
                    open(filename, 'wb').write(data)
                    return True
        except IOError:
            pass

        return False  # 치료 실패 리턴
